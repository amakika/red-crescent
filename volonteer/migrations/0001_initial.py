# Generated by Django 5.1.5 on 2025-02-02 00:50

import cloudinary.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Statistic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_volunteers', models.IntegerField(default=0)),
                ('total_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('male_volunteers', models.IntegerField(default=0)),
                ('female_volunteers', models.IntegerField(default=0)),
                ('other_gender_volunteers', models.IntegerField(default=0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('role', models.CharField(blank=True, choices=[('volunteer', 'Volunteer'), ('coordinator', 'Coordinator'), ('admin', 'Admin')], max_length=15, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('total_hours', models.FloatField(default=0.0)),
                ('xp_points', models.IntegerField(default=0)),
                ('profile_picture', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('profile_picture_width', models.PositiveIntegerField(blank=True, null=True)),
                ('profile_picture_height', models.PositiveIntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('criteria_hours', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('criteria_tasks', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('users', models.ManyToManyField(blank=True, related_name='achievement_users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='achievements',
            field=models.ManyToManyField(blank=True, related_name='user_achievements', to='volonteer.achievement'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date', models.DateTimeField()),
                ('location', models.CharField(max_length=255)),
                ('is_public', models.BooleanField(default=False)),
                ('coordinator', models.ForeignKey(limit_choices_to={'role': 'coordinator'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coordinator_events', to=settings.AUTH_USER_MODEL)),
                ('registered_volunteers', models.ManyToManyField(blank=True, related_name='registered_events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(default=0)),
                ('xp_points', models.IntegerField(default=0)),
                ('total_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the title of the task.', max_length=255)),
                ('description', models.TextField(help_text='Provide a detailed description of the task.')),
                ('photo', cloudinary.models.CloudinaryField(blank=True, help_text='Upload a photo related to the task.', max_length=255, null=True, verbose_name='image')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('expired', 'Expired')], default='pending', help_text='Select the current status of the task.', max_length=15)),
                ('due_date', models.DateTimeField(help_text='Set the due date for the task.')),
                ('hours_to_complete', models.DecimalField(decimal_places=2, default=0.0, help_text='Estimate the number of hours required to complete the task.', max_digits=5)),
                ('location', models.CharField(blank=True, help_text='Specify the location where the task will be performed.', max_length=255, null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Check this box to make the task visible to all users.')),
                ('volunteer_limit', models.PositiveIntegerField(default=0, help_text='Maximum number of volunteers allowed for this task.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coordinator', models.ForeignKey(limit_choices_to={'role': 'coordinator'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coordinator_tasks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_participating', models.BooleanField(default=False, help_text='Whether the volunteer is actively participating in the task.')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volonteer.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'task')},
            },
        ),
        migrations.AddField(
            model_name='task',
            name='assigned_volunteers',
            field=models.ManyToManyField(blank=True, limit_choices_to={'role': 'volunteer'}, related_name='tasks', through='volonteer.TaskParticipation', to=settings.AUTH_USER_MODEL),
        ),
    ]
